{"relevantArticles":[{"articleTitle":"FeignClient中GET方式被强制转换为POST的解决办法","articleAbstractText":"FeignClient中GET方式被强制转换为POST的解决办法","articleStatus":0,"articlePermalink":"/articles/2019/09/06/1567758360062.html","articleImg1URL":"https://img.hacpai.com/file/2019/09/image-5e7fc591.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Kubernetes中springboot项目使用zipkin链路追踪","articleAbstractText":"Kubernetes中springboot项目使用zipkin链路追踪","articleStatus":0,"articlePermalink":"/articles/2019/12/10/1575944824156.html","articleImg1URL":"https://img.hacpai.com/file/2019/12/image-203cb727.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"Java中String类（字符串操作）的10个常见问题和解决方法","articleAbstractText":"Java中String类（字符串操作）的10个常见问题和解决方法","articleStatus":0,"articlePermalink":"/articles/2018/10/24/1540365598203.html","articleImg1URL":"https://img.hacpai.com/bing/20180502.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"知乎上一个关于Java性能问题的探究","articleAbstractText":"今天在知乎上看到一个问题很有意思： // 下面一小段程序, 修改注释处所指的常数, 并不影响函数调用次数和结果, 但运行时间差距很大. // 常数=1时只需0.125秒; 常数=2时需要2.1秒; 常数=4时需要6.1秒. // 测试环境是 OpenJDK 11.0.1 64-bit, Win10 64-bit public class A { int v; public static void main(String[] args) { A a = new A(); Runnable[] r = new Runnable[] { () -&gt; a.v++, () -&gt; a.v++, () -&gt; a.v++, () -&gt; a.v++, }; for (int i = 0; i &lt; 1000000000; i++) r[i % 1].run(); // 这里的1改为2和4的三种情况性能有极大差距 System.exit(a.v); } }  自己运行了一下，结果与问题描述的时间基本一致，常数为1时i%1的结果恒为0，猜测jvm应该做了优化。 使用javap查看....","articleStatus":0,"articlePermalink":"/articles/2019/01/25/1548385131675.html","articleImg1URL":"https://img.hacpai.com/bing/20180804.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Spring应用分层","articleAbstractText":"应用分层","articleStatus":0,"articlePermalink":"/articles/2018/05/11/1526015415006.html","articleImg1URL":"https://img.hacpai.com/bing/20180319.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}