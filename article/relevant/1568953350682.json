{"relevantArticles":[{"articleTitle":"gitlab-runner基于docker19.03.2版本持续集成的实践","articleAbstractText":"首先基础环境为  示例共有两个项目 一个为k8s集群中的环境变量项目，另一个为springboot微服务项目 1环境变量项目的自动部署 先看gitlab-ci的内容 image: gongdear/alpine-ssh:latest stages: - deploy-test - deploy-demo before_script: # 预先装 ssh-agent # 2019-09-19 使用已经安装ssh-agent的镜像 # - 'which ssh-agent || ( apk update &amp;&amp; apk add openssh-client)' # 启动服务 - eval $(ssh-agent -s) # 将私钥写入deploy.key 文件 - echo \"$SSH_PRIVATE_KEY\" &gt; deploy.key # 配置较低权限 - chmod 0600 deploy.key # 注入密钥 - ssh-add deploy.key - mkdir -p ~/.ssh - '[[ -f /.dockerenv ]] &amp;&amp; echo....","articleStatus":0,"articlePermalink":"/articles/2019/09/20/1568959288888.html","articleImg1URL":"https://img.hacpai.com/file/2019/09/image-ff7b8c0a.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"gitlab-runner 安装使用","articleAbstractText":"gitlab-runner 安装使用","articleStatus":0,"articlePermalink":"/articles/2019/08/16/1565937022236.html","articleImg1URL":"https://img.hacpai.com/bing/20190323.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"},{"articleTitle":"Jenkins+GitLab+Docker+SpringCloud实现可持续自动化微服务","articleAbstractText":"现有混合云平台的场景下，即有线下和线上的环境，又有测试与正式的场景，而且结合了Docker，导致打包内容有所区分，且服务的发布流程复杂起来，手工打包需要在编译阶段就要根据环境到处更改配置，因此纯手工发布增加了实施的难度，需要一个统一的适应各种环境部署的方案。  基于微服务的发布流程 　　手动/自动构建 -&gt; Jenkins 调度 K8S API -＞动态生成 Jenkins Slave pod -＞ Slave pod 拉取 Git 代码／编译／打包镜像 -＞推送到镜像仓库 Harbor -＞ Slave工作完成，Pod 自动销毁 -＞部署到测试或生产 Kubernetes（K8S）平台。 　　上面是理想状况下的将服务编译打包成镜像上传到镜像库后部署到Kubernetes平台的一个流程，但问题是： 我们有线上线下平台，代码在线下GitLab，是出不了外网的，因此线上K8S集群无法拉取代码编译。 Jenkins的master所在服务器是CentOS6.5，没有Docker环境，也没有在K8S集群服务器内，因此无法直接执行docker build镜像和 kubectl apply 发....","articleStatus":0,"articlePermalink":"/articles/2019/08/02/1564735994109.html","articleImg1URL":"https://img.hacpai.com/file/2019/08/14490612ff12a7f04994a00-ec665ed0.png?imageView2/2/w/1280/format/jpg/interlace/1/q/100"},{"articleTitle":"/var/lib/docker/overlay2 占用很大，清理Docker占用的磁盘空间，迁移 /var/lib/docker 目录","articleAbstractText":"0&nbsp; du -hs /var/lib/docker/ 命令查看磁盘使用情况。 linlf@dacent:~$ sudo du -hs /var/lib/docker/ 237G /var/lib/docker/ 1&nbsp;docker system df命令，类似于Linux上的df命令，用于查看Docker的磁盘使用情况: linlf@dacent:~$ docker system df TYPE TOTAL ACTIVE SIZE RECLAIMABLE Images 7 2 122.2GB 79.07GB (64%) Containers 2 2 61.96GB 0B (0%) Local Volumes 0 0 0B 0B Build Cache 0 0 0B 0B 2&nbsp;docker system prune命令可以用于清理磁盘，删除关闭的容器、无用的数据卷和网络，以及dangling镜像(即无tag的镜像)。 linlf@dacent:~$ docker system prune WARNING! This will remove: - all sto....","articleStatus":0,"articlePermalink":"/articles/2019/07/17/1563342180045.html","articleImg1URL":"https://img.hacpai.com/bing/20181016.jpg?imageView2/1/w/1280/h/720/interlace/1/q/100"}]}